{
  //https://snippet-generator.app/?description=&tabtrigger=&snippet=&mode=vscode  //这里的vue3是代码片段id，只要不重复，随意设置即可
  "vue3": {
    //prefix是代码片段前缀，在编辑器输入vue3init就会弹出body里配置的代码段
    "prefix": "vue3init",
    "body": [
      "<template>",
      "$0", //代表光标的位置
      "</template>",
      "",
      "<script setup lang='ts'>",
      "",
      "</script>",
      "",
      "<style lang='scss'>",
      "",
      "</style>",
    ],
    "description": "vue3单文件模板", //这里是描述
  },
  "vue3定义属性": {
    "prefix": "props",
    "body": [
      "const props = withDefaults(",
      "  defineProps<{",
      "    placeholder?: string",
      "    type?: string",
      "  }>(),",
      "  {",
      "    placeholder: '请输入',",
      "    type: 'text',",
      "  },",
      ")",
    ],
    "description": "vue3定义属性",
  },
  "vue3定义组件slot": {
    "prefix": "slot",
    "body": [
      "<slot name=\"default\"></slot>"
    ],
    "description": "vue3定义组件slot",
  },
  "vue3组件使用slot": {
    "prefix": "slottem",
    "body": [
      "<template #label>+86</template>"
    ],
    "description": "vue3定义组件slot",
  },
  "vue3使用ref": {
    "prefix": "ref",
    "body": [
      "import { ref } from 'vue'",
      "let isError = ref(false)"
    ],
    "description": "vue3使用ref",
  },
  "vue3引入组件": {
    "prefix": "importcom",
    "body": [
      "import XIcon from '@/components/Base/Basic/XIcon.vue'",
      ""
    ],
    "description": "vue3引入组件",
  },
  "vue3自定义属性": {
    "prefix": "emit",
    "body": [
      "",
      "const emit = defineEmits<{",
      "  (e: 'click', index: number): void",
      "}>()",
      "",
      "emit('click', index)",
    ],
    "description": "vue3自定义属性",
  },
  "vue3动态class": {
    "prefix": "class",
    "body": [
      ":class=\"{",
      "      'cursor-pointer': cursor,",
      "    }\""
    ],
    "description": "vue3动态class",
  },
  "vue3定义计算属性": {
    "prefix": "compu3",
    "body": [
      "const innerModelValue = computed({",
      "  get: () => props.modelValue,",
      "  set: (value) => emit('update:modelValue', value),",
      "})",
    ],
    "description": "vue3定义计算属性",
  },
  "vue3中使用tihs": {
    "prefix": "this3",
    "body": [
      "import {  getCurrentInstance,type ComponentInternalInstance} from 'vue'",
      "const instance = getCurrentInstance() as ComponentInternalInstance",
      "",
    ],
    "description": "vue3中使用tihs",
  },
  "vue3-生命周期-卸载前": {
    "prefix": "onUnmounted",
    "body": [
      "onUnmounted(() => {",
      "    ",
      " })"
    ],
    "description": "vue3-生命周期-卸载前",
  },
  "flexcenter": {
    "prefix": "flexcenter",
    "body": [
      "flex flex-row items-center justify-center"
    ],
    "description": "flex居中",
  },
  "tailwind cursor-pointer": {
    "prefix": "pointer",
    "body": [
      "cursor-pointer"
    ],
    "description": "tailwind cursor-pointer",
  },
  "tailwind 选择子元素": {
    "prefix": ">div",
    "body": [
      "[&_>div]:mr-10"
    ],
    "description": "tailwind 选择子元素"
  },
  "定义一个函数": {
    "prefix": "func",
    "body": [
      "function name(params:type) {",
      "  ",
      "}"
    ],
    "description": "定义一个函数",
  },
  "定义一个鼠标事件函数": {
    "prefix": "eventfunc",
    "body": [
      "function handleClick(e: MouseEvent) {",
      "",
      "}"
    ],
    "description": "定义一个鼠标事件函数",
  },
  "元素是否可见变量": {
    "prefix": "visi",
    "body": [
      "visible"
    ],
    "description": "元素是否可见变量",
  },
  "定义一个input事件": {
    "prefix": "inputeve",
    "body": [
      "function handleInput(e: Event) {",
      "  const value = (e.target as HTMLInputElement).value",
      "  emit('update:modelValue', value)",
      "}",
    ],
    "description": "定义一个input事件",
  },
  "js判断对象是否有某个属性": {
    "prefix": "hasow",
    "body": [
      "hasOwnProperty"
    ],
    "description": "js判断对象是否有某个属性",
  },
  "js数组造数据": {
    "prefix": "array",
    "body": [
      "new Array(10000000 / 4).fill(rules[0])"
    ],
    "description": "js数组造数据",
  },
  "ts定义obj": {
    "prefix": "tsobj",
    "body": [
      "Record<string, any>",
      "",
      "{",
      "  [key:string]:string",
      "}"
    ],
    "description": "ts定义obj",
  },
  "ts定义枚举": {
    "prefix": "tsenum",
    "body": [
      "export enum validType {",
      "  phone = 'phone',",
      "  date = 'date',",
      "}",
    ],
    "description": "ts定义枚举",
  },
  "ts定义接口": {
    "prefix": "tsinter",
    "body": [
      "export interface ruleType {",
      "  validType?: validType",
      "}"
    ],
    "description": "ts定义接口",
  },
  "ts定义类型": {
    "prefix": "tstype",
    "body": [
      "export type formRulesType = Record<string, Array<ruleType>>"
    ],
    "description": "ts定义类型",
  },
  "变量-初始值": {
    "prefix": "initial",
    "body": [
      "initial"
    ],
    "description": "变量-初始值",
  },
  "变量-初始动作": {
    "prefix": "initializeState",
    "body": [
      "initializeState"
    ],
    "description": "变量-初始动作",
  },
  "变量-定时器id": {
    "prefix": "intervalId",
    "body": [
      "  /**",
      "   * 定时器Id",
      "   */",
      "  let intervalId: number | null",
    ],
    "description": "变量-定时器id",
  },
  "vue3-hook": {
    "prefix": "hook",
    "body": [
      "const useXX = () => {",
      "  function b() {}",
      "  return {",
      "    b,",
      "  }",
      "}",
      "export default useXX",
    ],
    "description": "vue3-hook",
  },
  "js导入整个对象": {
    "prefix": "importall",
    "body": [
      "import * as A from ''"
    ],
    "description": "js导入整个对象",
  },
  "js导入默认对象": {
    "prefix": "importdefault",
    "body": [
      "import A from ''"
    ],
    "description": "js导入默认对象",
  },
  "js导入对象解构形式": {
    "prefix": "import",
    "body": [
      "import {  } from \"\";"
    ],
    "description": "js导入对象解构形式",
  },
  "js导出默认对象": {
    "prefix": "exportdefault",
    "body": [
      "export default ''"
    ],
    "description": "js导出默认对象",
  },
  "js导出默认对象2": {
    "prefix": "exportdefault2",
    "body": [
      "export { default as  } from ''"
    ],
    "description": "js导出默认对象2"
  },
  "js导出对象": {
    "prefix": "export",
    "body": [
      "export {",
      "    ",
      "}"
    ],
    "description": "js导出对象",
  },
  "js导出整个对象": {
    "prefix": "exportall",
    "body": [
      "export * as A from ''",
      ""
    ],
    "description": "js导出整个对象",
  },
  "使用request hook": {
    "prefix": "userequest",
    "body": [
      "import { useRequest } from 'none-ui/hooks'",
      "const { isRequesting, request } = useRequest(apiClient.userSendcodePost)"
    ],
    "description": "使用request hook"
  },
  "js promise finally": {
    "prefix": "finally",
    "body": [
      ".finally(()=>{",
      "  ",
      "})"
    ],
    "description": "js promise finally"
  },
  "js promise then": {
    "prefix": "then",
    "body": [
      ".then((res) => {",
      "  ",
      "})"
    ],
    "description": "js promise then"
  },
  "js promise error": {
    "prefix": "catch",
    "body": [
      ".catch((error) => {",
      "  ",
      "})"
    ],
    "description": "js promise error"
  },
  "js promise": {
    "prefix": "promise",
    "body": [
      "reqFn()",
      "      .then((res) => {",
      "      })",
      "      .catch((error) => {",
      "        //console.log(error);",
      "      })",
      "      .finally(() => {",
      "      })"
    ],
    "description": "js promise"
  },
  "js 随机数": {
    "prefix": "random",
    "body": [
      "Math.random()",
      "    .toString(16)",
      "    .slice(2, 2 + length)"
    ],
    "description": "js 随机数"
  }
}